openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string

    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        customer_id:
          type: integer
          format: int64
        items:
          type: array
          items:
            type: object
            properties:
              item_id: 
                type: integer              
                format: int64
              amount:
                type: integer
        placedAt:
          type: string
          format: date-time
        confirmed:
          type: boolean
        paid:
          type: boolean

  securitySchemes:
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"          


paths:
  /user/login:
    post:
      operationId: LoginUser
      parameters:
        - name: username
          in: query
          description: "The user name for login"
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: "The password for login in clear text"
          required: true
          schema:
            type: string
      responses:
        200:
          description: "Successful operation"
          headers:
            X-Expires-After:
              description: "date in UTC when token expires"
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: "Invalid username/password supplied"
          content: {}


  /user/logout:
    post:
      summary: "Logs out current logged in user session"
      operationId: logoutUser
      responses:
        200:
          description: "Successful logout"
          content: {}


  /items:
    post:
      summary: "Add a new item to the store"
      operationId: CreateItem
      parameters:
        - name: body
          in: query        
          description: "Item object that needs to be added to the store"
          required: true
          schema:
            $ref: "#/components/schemas/Item"
      responses:
        405:
          description: "Invalid input"
      security:
        - api_key: []

    get:
      summary: "Lists Items with filters"
      operationId: ListItems
      parameters:
      - name: price_min
        in: query
        description: "Lower price limit"
        required: false
        schema:
          type: integer
          format: int64
      - name: price_max
        in: query
        description: "Upper price limit"
        required: false
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        400:
          description: "Invalid price range"
          content: {}
     

  /items/upload_image:
    post:
      summary: "Uploads an image"
      operationId: UploadFile
      parameters:
        - name: additionalMetadata
          in: header
          description: "Additional data to pass to server"
          required: true
          schema:
            type: string
        - name: file
          in: header
          description: "file to upload"
          required: true
          schema:
            type: string
            format: binary
      responses:
        200:
          description: "Successful operation"
      security:
        - api_key: []

  /items/{itemId}:
    get:
      summary: "Find item by ID"
      operationId: GetItem
      parameters:
      - name: itemId
        in: path
        description: "ID of item to return"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          description: "Invalid ID supplied"
          content: {}
    put:
      summary: "Updates a item in the store with form data"
      operationId: UpdateItem
      parameters:
      - name: itemId
        in: path
        description: "ID of item that needs to be updated"
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: "Updated name of the item"
                status:
                  type: string
                  description: "Updated status of the item"
      responses:
        405:
          description: "Invalid input"
          content: {}
      security:
        - api_key: []

    delete:
      summary: "Deletes a item"
      operationId: DeleteItem
      parameters:
      - name: itemId
        in: path
        description: "Item id to delete"
        required: true
        schema:
          type: integer
          format: int64
      responses:
        400:
          description: "Invalid ID supplied"
          content: {}
        404:
          description: "Item not found"
          content: {}
      security:
      - api_key: []
